//Joseph Kim - USDA ARS ALARC
//September 5th, 2013
//Addie Thompson, Purdue University, 8-18-15
//Combined by Katherine
 
//update to this version or later of imagej
requires("1.47u");
 
//directory locations
dir1 = getDirectory("Choose SOURCE Directory" );
dir2 = getDirectory("Choose MIDDLE Directory" ); // new added
dir3 = getDirectory("Choose DESTINATION Directory" ); // changed dir2 to dir3
 
 
macro "make binary HSB" {
 
// sets list var as list of files in dir1
list = getFileList(dir1);
 
//Define three arrays to act as the "buttons" for HSB thresholding
min=newArray(3);
max=newArray(3);
filter=newArray(3);
//Hue range - "pass" means select values in range alternatively
//"stop" can be used to invert the selection, allowing values outside the range
min[0]=0;
max[0]=255;
filter[0]="pass";
//Saturation range
min[1]=0;
max[1]=255;
filter[1]="pass";
//Brightness range
min[2]=0;
max[2]=58;
filter[2]="pass";
 
//optimizes for batch - this runs faster because it does not display images
setBatchMode(true);
 
//loop over files in list
for(i=0; i<list.length; i++) {
//clear memory (added by Jeff)
print("At start of loop, free memory:", call("ij.IJ.freeMemory")); // returns a string
print("At start of loop, images open:", nImages);
//displays progress in imageJ toolbar
showProgress(i+1, list.length);
//processing time point1
t0 = getTime();
//close any open images as garbage collection (added by Jeff)
while (nImages>0) {
          selectImage(nImages);
          close();
        }
open(dir1+list[i]);
//gets image/file name
imgName=getTitle();
 
print("Working on image ", imgName);
 
//converting to HSB and using othe operations requires RGB
run("RGB Color");
 
//must duplicate thresholding to create a selection
run("Duplicate...", "title=1.tif");
 
print("After duplicating, free memory:", call("ij.IJ.freeMemory")); // returns a string
 
//begin color thresholding
//defines "a" var as image name
a=getTitle();
 
//generates HSB stack of image, setup interface vars
run("HSB Stack");
run("Convert Stack to Images");
selectWindow("Hue");
rename("0");
selectWindow("Saturation");
rename("1");
selectWindow("Brightness");
rename("2");
//runs thresholding on each HSB stack using values set above
for (j=0;j<3;j++){
  selectWindow(""+j);
  setThreshold(min[j], max[j]);
  run("Convert to Mask");
  if (filter[j]=="stop")  run("Invert");
}
 
//uses image calculator to combine seperate images from stack
imageCalculator("AND create", "0","1");
imageCalculator("AND create", "Result of 0","2");
for (k=0;k<3;k++){
  selectWindow(""+k);
  close();
}
 
//consolidate combined images and rename to image name a var
selectWindow("Result of 0");
close();
selectWindow("Result of Result of 0");
rename(a);
//end color thresholding
 
//minor cleanup of image
run("Despeckle");
 
//generate selection from mask generated in thesholding
run("Create Selection");
//save image as PNG in destination directory
saveAs("JPEG", dir2 + imgName + "binary");
 
////////////////////////Copied from another program/////////////////
//set color threshold
//setThreshold(0, 140);
//setOption("BlackBackground", false);
//run("Convert to Mask");
 
//setTool("rectangle");
makeRectangle(900, 632, 3500, 3214);
 
// Analyze Particles counts seed and produces data and outlines
call("ij.plugin.filter.ParticleAnalyzer.setFontSize", 50);
//choose desired measurements and decimal point
run("Set Measurements...", "area center perimeter shape feret's display redirect=None decimal=3");
//creates pixel to inch scale
run("Set Scale...", "distance=86 known=1 pixel=1 unit=inch");
 
//choose size and shape of particles to be detected and output information
run("Analyze Particles...", "size=5-Infinity circularity=0.00-1.00 show=Outlines display summarize results");
//saving seed outline picture
saveAs("PNG", dir3+list[i]+"outline");
////////////////////////End of Copy/////////////////////////////
 
//run Java garbage collection to free memory (added by Jeff, 10 Sep 2013)
call("java.lang.System.gc");
close();
}
 
 
////////////////////////Copied from another Program/////////////////
//save measurements
selectWindow("Results");
saveAs("Measurements", "" + dir3 + "leaf results.txt");
 
//creates the summary
macro "summary" {
selectWindow("Summary");
//save measurements
saveAs("Measurements", "" + dir3 + "summary.txt");
 
//display message box with OK button to close macro
title = "Processing complete";
msg = "Click \"OK\" to close macro.";
waitForUser(title, msg);
}
 
// Closes any images left open to reduce memory usage
// From http://rsb.info.nih.gov/ij/macros/Close_All_Windows.txt
macro "Close All Windows" {
      
while (nImages>0) {
        selectImage(nImages);
          
close();
}
  }
////////////////////////End of Copy/////////////////////////////
}
